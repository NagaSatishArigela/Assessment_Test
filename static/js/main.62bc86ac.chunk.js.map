{"version":3,"sources":["StateProvider.js","components/Sidebar.js","components/ExcelViewer.js","reducer.js","App.js","reportWebVitals.js","index.js"],"names":["StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","columns","state","dispatch","checkExists","cIndex","undefined","selectedColumn","includes","columnClickHandler","e","isDraggable","target","getAttribute","type","payload","id","className","IconButton","onClick","map","columnName","columnIndex","draggable","onDragEnd","console","log","stopPropagation","preventDefault","data-id","useStyles","makeStyles","table","minWidth","ExcelViewer","sheet","useState","tableData","setTableData","classes","useEffect","resetRows","data","row","rindex","filter","cell","cindex","onDrop","onDragOver","TableContainer","component","Paper","Table","TableHead","TableRow","heading","index","TableCell","TableBody","action","col","App","setSheet","fileName","setFileName","setColumns","onChange","f","files","name","reader","FileReader","onload","result","readedData","XLSX","wsname","SheetNames","ws","Sheets","dataParse","sheet_to_json","header","raw","setTimeout","readAsBinaryString","accept","document","getElementById","click","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.62bc86ac.chunk.js","sourcesContent":["import { createContext, useContext, useReducer } from \"react\";\r\n\r\n\r\nexport const StateContext = createContext()\r\n\r\nexport const StateProvider = ({reducer, initialState, children}) => {\r\n    return (\r\n        <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n            {children}\r\n        </StateContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useStateValue = () => useContext(StateContext)","import { useEffect, useState } from 'react';\r\nimport { useStateValue } from '../StateProvider';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport './Sidebar.css'\r\nimport { IconButton } from '@material-ui/core';\r\n\r\n\r\nfunction Sidebar({ columns }) {\r\n\r\n    const [state, dispatch] = useStateValue();\r\n\r\n    const checkExists = (cIndex) => {\r\n        if(state === undefined)\r\n            return true;\r\n        if (state.selectedColumn.includes(cIndex+'')) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const columnClickHandler = (e) => {\r\n        const isDraggable = e.target.getAttribute('draggable');\r\n        if(isDraggable === true || isDraggable === 'true'){\r\n\r\n        } else{\r\n            dispatch({\r\n                type: 'REMOVE_COLUMN',\r\n                payload: e.target.getAttribute('data-id')\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n    const resetColumns = () => {\r\n        dispatch({\r\n            type: 'RESET_COLUMNS'\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div id=\"sidebar\">\r\n            <div className=\"sidebar-header\">\r\n                <h5>COLUMNS</h5>\r\n                <IconButton onClick={resetColumns}>\r\n                <RefreshIcon /> <small>RESET</small>\r\n                </IconButton>\r\n            </div>\r\n            <div className=\"data-columns\">\r\n                {\r\n                    columns.map((columnName, columnIndex) =>\r\n                        (<h6 className={checkExists(columnIndex) ? 'draggable' : ''} draggable={checkExists(columnIndex)} onDragEnd={(e) => {\r\n\r\n                            console.log(e);\r\n\r\n                            dispatch({\r\n                                type: 'ADD_COLUMN',\r\n                                payload: state === undefined ? [e.target.getAttribute('data-id')] : [...state.selectedColumn, e.target.getAttribute('data-id')]\r\n                            });\r\n\r\n                            e.stopPropagation();\r\n                            e.preventDefault();\r\n                        }} data-id={columnIndex} key={columnIndex} onClick={columnClickHandler}  >{columnName}</h6>)\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import { makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useStateValue } from '../StateProvider';\r\nimport './ExcelViewer.css'\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n});\r\n\r\nfunction ExcelViewer({ sheet }) {\r\n\r\n    const [tableData, setTableData] = useState([]);\r\n\r\n    const classes = useStyles()\r\n\r\n    const [state, dispatch] = useStateValue();\r\n\r\n    console.log(state);\r\n\r\n    useEffect(() => {\r\n        resetRows();\r\n    }, [state])\r\n\r\n    const resetRows = () => {\r\n        const data = sheet.map((row, rindex) => {\r\n            return row?.filter((cell, cindex) => state?.selectedColumn.includes(cindex + ''));\r\n        });\r\n        setTableData(data);\r\n    }\r\n\r\n    return (\r\n        <div id=\"main\" onDrop={(e) => {\r\n                console.log('Drop', e);                \r\n                e.stopPropagation();\r\n\r\n        }} onDragOver={(e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n        }}>\r\n\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {\r\n                                tableData[0]?.map((heading, index) => <TableCell key={index}>{heading}</TableCell>)\r\n                            }\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {\r\n                            tableData?.map((row, index) => index ? <TableRow key={index}>\r\n                                {\r\n                                    row?.map((cell, index) => <TableCell key={index}>{cell}</TableCell>)\r\n                                }\r\n                            </TableRow> : <></>)\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExcelViewer\r\n","\r\nexport const initialState = {\r\n    selectedColumn: []\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'SHOW_ALL_COLUMNS': \r\n            if(state === undefined)\r\n                state = initialState\r\n            return {...state, selectedColumn: action.payload}\r\n        case 'ADD_COLUMN': \r\n            if(state === undefined)\r\n                state = initialState\r\n            return {...state, selectedColumn: action.payload};\r\n        case 'REMOVE_COLUMN':\r\n            if(state === undefined)\r\n                state = initialState\r\n            return {...state, selectedColumn: state.selectedColumn.filter(col => col+'' !== action.payload+'')};\r\n        case 'RESET_COLUMNS':\r\n            if(state === undefined)\r\n                state = initialState\r\n            return {...state, selectedColumn: []}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer","import './App.css';\nimport Sidebar from './components/Sidebar';\nimport ExcelViewer from './components/ExcelViewer';\nimport * as XLSX from 'xlsx'\nimport { useState } from 'react';\nimport { StateProvider } from './StateProvider';\nimport reducer, { initialState } from './reducer';\n\n\nfunction App() {\n\n  const [sheet, setSheet] = useState([])\n  const [fileName, setFileName] = useState('')\n  const [columns, setColumns] = useState([])\n\n  const openFileDialog = () => {\n    document.getElementById('excelInput').click();\n  }\n\n  return (\n    <StateProvider value={initialState} reducer={reducer}>\n      <div className=\"app\">\n      <header>\n        <div className=\"header-inputFile\">\n          <input id=\"excelInput\" onChange={(e) => {\n            e.preventDefault();\n            let files = e.target.files, f = files[0];\n            setFileName(f.name);\n            let reader = new FileReader();\n            reader.onload = function (e) {\n              let data = e.target.result;\n              let readedData = XLSX.read(data, { type: 'binary' });\n              const wsname = readedData.SheetNames[0];\n              const ws = readedData.Sheets[wsname];\n              const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1, raw: false });\n\n              setTimeout(() => {\n                setSheet(dataParse);\n                setColumns(dataParse[0]);\n              }, 500);\n\n            };\n            reader.readAsBinaryString(f)\n          }} className=\"header-inputFile-button\" type=\"file\" accept=\".xlsx\" />\n        </div>\n\n        <div className=\"header-customInput\">\n          <span>{fileName === '' ? 'No file selected.' : fileName}</span>\n          <button onClick={openFileDialog}>Import Sheet</button>\n        </div>\n      </header>\n      <Sidebar columns={columns} />\n      <ExcelViewer sheet={sheet} />\n    </div>\n    </StateProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
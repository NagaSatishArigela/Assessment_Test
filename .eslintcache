[{"C:\\Users\\nagas\\Downloads\\excelviewer\\src\\index.js":"1","C:\\Users\\nagas\\Downloads\\excelviewer\\src\\App.js":"2","C:\\Users\\nagas\\Downloads\\excelviewer\\src\\reportWebVitals.js":"3","C:\\Users\\nagas\\Downloads\\excelviewer\\src\\reducer.js":"4","C:\\Users\\nagas\\Downloads\\excelviewer\\src\\StateProvider.js":"5","C:\\Users\\nagas\\Downloads\\excelviewer\\src\\components\\Sidebar.js":"6","C:\\Users\\nagas\\Downloads\\excelviewer\\src\\components\\ExcelViewer.js":"7"},{"size":455,"mtime":1607153317790,"results":"8","hashOfConfig":"9"},{"size":1876,"mtime":1607177974109,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":924,"mtime":1607184483200,"results":"12","hashOfConfig":"9"},{"size":404,"mtime":1607152622870,"results":"13","hashOfConfig":"9"},{"size":2236,"mtime":1607184601148,"results":"14","hashOfConfig":"9"},{"size":2075,"mtime":1607168734887,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"k0yvt5",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"C:\\Users\\nagas\\Downloads\\excelviewer\\src\\index.js",[],["33","34"],"C:\\Users\\nagas\\Downloads\\excelviewer\\src\\App.js",[],"C:\\Users\\nagas\\Downloads\\excelviewer\\src\\reportWebVitals.js",[],"C:\\Users\\nagas\\Downloads\\excelviewer\\src\\reducer.js",[],"C:\\Users\\nagas\\Downloads\\excelviewer\\src\\StateProvider.js",[],"C:\\Users\\nagas\\Downloads\\excelviewer\\src\\components\\Sidebar.js",["35","36"],"import { useEffect, useState } from 'react';\r\nimport { useStateValue } from '../StateProvider';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport './Sidebar.css'\r\nimport { IconButton } from '@material-ui/core';\r\n\r\n\r\nfunction Sidebar({ columns }) {\r\n\r\n    const [state, dispatch] = useStateValue();\r\n\r\n    const checkExists = (cIndex) => {\r\n        if(state === undefined)\r\n            return true;\r\n        if (state.selectedColumn.includes(cIndex+'')) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const columnClickHandler = (e) => {\r\n        const isDraggable = e.target.getAttribute('draggable');\r\n        if(isDraggable === true || isDraggable === 'true'){\r\n\r\n        } else{\r\n            dispatch({\r\n                type: 'REMOVE_COLUMN',\r\n                payload: e.target.getAttribute('data-id')\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n    const resetColumns = () => {\r\n        dispatch({\r\n            type: 'RESET_COLUMNS'\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div id=\"sidebar\">\r\n            <div className=\"sidebar-header\">\r\n                <h5>COLUMNS</h5>\r\n                <IconButton onClick={resetColumns}>\r\n                <RefreshIcon /> <small>RESET</small>\r\n                </IconButton>\r\n            </div>\r\n            <div className=\"data-columns\">\r\n                {\r\n                    columns.map((columnName, columnIndex) =>\r\n                        (<h6 className={checkExists(columnIndex) ? 'draggable' : ''} draggable={checkExists(columnIndex)} onDragEnd={(e) => {\r\n\r\n                            console.log(e);\r\n\r\n                            dispatch({\r\n                                type: 'ADD_COLUMN',\r\n                                payload: state === undefined ? [e.target.getAttribute('data-id')] : [...state.selectedColumn, e.target.getAttribute('data-id')]\r\n                            });\r\n\r\n                            e.stopPropagation();\r\n                            e.preventDefault();\r\n                        }} data-id={columnIndex} key={columnIndex} onClick={columnClickHandler}  >{columnName}</h6>)\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","C:\\Users\\nagas\\Downloads\\excelviewer\\src\\components\\ExcelViewer.js",["37","38"],"import { makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useStateValue } from '../StateProvider';\r\nimport './ExcelViewer.css'\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n});\r\n\r\nfunction ExcelViewer({ sheet }) {\r\n\r\n    const [tableData, setTableData] = useState([]);\r\n\r\n    const classes = useStyles()\r\n\r\n    const [state, dispatch] = useStateValue();\r\n\r\n    console.log(state);\r\n\r\n    useEffect(() => {\r\n        resetRows();\r\n    }, [state])\r\n\r\n    const resetRows = () => {\r\n        const data = sheet.map((row, rindex) => {\r\n            return row?.filter((cell, cindex) => state?.selectedColumn.includes(cindex + ''));\r\n        });\r\n        setTableData(data);\r\n    }\r\n\r\n    return (\r\n        <div id=\"main\" onDrop={(e) => {\r\n                console.log('Drop', e);                \r\n                e.stopPropagation();\r\n\r\n        }} onDragOver={(e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n        }}>\r\n\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {\r\n                                tableData[0]?.map((heading, index) => <TableCell key={index}>{heading}</TableCell>)\r\n                            }\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {\r\n                            tableData?.map((row, index) => index ? <TableRow key={index}>\r\n                                {\r\n                                    row?.map((cell, index) => <TableCell key={index}>{cell}</TableCell>)\r\n                                }\r\n                            </TableRow> : <></>)\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExcelViewer\r\n",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":1,"column":10,"nodeType":"45","messageId":"46","endLine":1,"endColumn":19},{"ruleId":"43","severity":1,"message":"47","line":1,"column":21,"nodeType":"45","messageId":"46","endLine":1,"endColumn":29},{"ruleId":"43","severity":1,"message":"48","line":18,"column":19,"nodeType":"45","messageId":"46","endLine":18,"endColumn":27},{"ruleId":"49","severity":1,"message":"50","line":24,"column":8,"nodeType":"51","endLine":24,"endColumn":15,"suggestions":"52"},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetRows'. Either include it or remove the dependency array.","ArrayExpression",["55"],"no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},"Update the dependencies array to be: [resetRows, state]",{"range":"58","text":"59"},[596,603],"[resetRows, state]"]